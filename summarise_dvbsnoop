#!/usr/bin/perl
use warnings;
use strict;
#
# Reads a set of dvbsnoop decode text files on input and outputs a summary
#

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

sub stream_type_to_str($) {
	my ($stream_type) = @_;

        my %map = (
            '0x02' => 'video(h262)',
            '0x03' => 'audio',
            '0x04' => 'audio(0x04)',
            '0x0b' => 'DSM-CC',
        );

        my $result = $map{$stream_type};
        if ($result) {
            return $result;
        }

	# Else, need more information from a DescriptorTag
	return undef;
}

sub lcn_process($$) {
	my ($db,$hexlcn) = @_;

	my @digits = split / /,$hexlcn;
	my $service_id = '0x'.$digits[0].$digits[1];
	my $lcn = hex($digits[2].$digits[3]) & 0x3ff;

	$db->{program}{$service_id}{LCN}=$lcn;

	$db->{shared}{LCN}{$lcn}{program} = $service_id;
	$db->{shared}{LCN}{$lcn}{network} = 'FIXME';
}

sub add_type($$$) {
	my ($db,$found,$type) = @_;

	my $program_number = $found->{program_number};
	my $stream_type = $found->{Stream_type};
	my $pid = $found->{Elementary_PID};

	return if !$pid or !$stream_type or !$program_number;

	if ($type) {
		$found->{type} = $type;
		$db->{program}{$program_number}{pid}{$type}=$pid;
		$db->{pid}{$pid}{usage}=$type;
		delete $db->{program}{$program_number}{pid}{$stream_type};
	} else {
		$db->{program}{$program_number}{pid}{$stream_type}=$pid;
		$db->{pid}{$pid}{usage}=$stream_type;
	}
}

# Store our summary info
my $db={};

# Store information found on previous input lines
my $found={};

# TODO - accept cmdline argument defining the global name for this set of
# files, then move almost all db data into a namespace defined by this.
# This would allow the merging of the summary files from different stations.
# The db->shared namespace is shared amongst all stations

while (<>) {
	chomp;

	# TODO - read the ^PID: at the start of the file and mark that pid
	# as seen in the db->

	# *0x0000.PAT
	if (m/^    Program_number: (\d+) \((0x[[:xdigit:]]{4})\)/) {
		$found->{program_number} = $2;
		next;
	}

	# *0x0000.PAT
	if (m/^    (Network_PID|Program_map_PID): (\d+) \((0x[[:xdigit:]]{4})\)/) {
		my $pid = $3;

		my $usage;
		if ($1 eq 'Network_PID') {
			$usage = 'NIT';
		} else {
			$usage = 'PMT';
		}

		my $program_number = $found->{program_number};
		delete $found->{program_number};

		$db->{program}{$program_number}{pid}{$usage}=$pid;
		$db->{pid}{$pid}{programs}{$program_number}++;
		$db->{pid}{$pid}{usage}=$usage;
		next;
	} 

	# *0x0010.NIT
	# FIXME - DVB-DescriptorTag: 64 (0x40)
	if (m/^        Network_name: "([^"]+)"/) {
		$db->{global}{network_name}=$1;
		next;
	}

	# *0x0010.NIT
	# FIXME - DVB-DescriptorTag: 90 (0x5a)
	# frequency we are listening to
	if (m/^            Center frequency: (0x[[:xdigit:]]{8}) \(= (\d{6}.\d{3}) kHz\)/) {
		$db->{global}{center_frequency}=$2;
		$db->{shared}{frequency}{$2}{seen}++;
		$found->{frequency}=$2;
		next;
	}

	# *0x0010.NIT
	# FIXME - DVB-DescriptorTag: 90 (0x5a)
	if (m/^            Bandwidth: (\d+) \((0x[[:xdigit:]]{2})\)  \[= (\d+) MHz\]/) {
		next if !$found->{frequency};
		$db->{shared}{frequency}{$found->{frequency}}{bandwidth}=$3;
		next;
	}

	# *0x0010.NIT
	# FIXME - DVB-DescriptorTag: 90 (0x5a)
	if (m/^            Constellation: (\d+) \((0x[[:xdigit:]]{2})\)  \[= (\S+)\]/) {
		next if !$found->{frequency};
		$db->{shared}{frequency}{$found->{frequency}}{constellation}=$3;
		next;
	}

	# *0x0010.NIT
	# FIXME - DVB-DescriptorTag: 90 (0x5a)
	if (m/^            Code_rate_HP_stream: (\d+) \((0x[[:xdigit:]]{2})\)  \[= (\S+)\]/) {
		next if !$found->{frequency};
		$db->{shared}{frequency}{$found->{frequency}}{code_rate_hp}=$3;
		next;
	}

	# *0x0010.NIT
	# FIXME - DVB-DescriptorTag: 90 (0x5a)
	if (m/^            Code_rate_LP_stream: (\d+) \((0x[[:xdigit:]]{2})\)  \[= (\S+)\]/) {
		next if !$found->{frequency};
		$db->{shared}{frequency}{$found->{frequency}}{code_rate_lp}=$3;
		next;
	}

	# *0x0010.NIT
	# FIXME - DVB-DescriptorTag: 90 (0x5a)
	if (m/^            Guard_interval: (\d+) \((0x[[:xdigit:]]{2})\)  \[= (\S+)\]/) {
		next if !$found->{frequency};
		$db->{shared}{frequency}{$found->{frequency}}{guard_interval}=$3;
		next;
	}

	# *0x0010.NIT
	# FIXME - DVB-DescriptorTag: 90 (0x5a)
	if (m/^            Transmission_mode: (\d+) \((0x[[:xdigit:]]{2})\)  \[= (\S+) mode\]/) {
		next if !$found->{frequency};
		$db->{shared}{frequency}{$found->{frequency}}{transmission_mode}=$3;
		delete $found->{frequency};
		next;
	}

	# *0x0010.NIT
	# part of a DVB-DescriptorTag: 98 frequency_list_descriptor
	if (m/^               Centre_frequency: ([[:xdigit:]]{8})  \(= (\d{6}.\d{3}) kHz\)/) {
		$db->{shared}{frequency}{$2}{seen}++;
		next;
	}

	# *0x0010.NIT, *0x0011.SDT *.PMT
	if (m/^            DVB-DescriptorTag: (\d+)/) {
		$found->{DVB_DescriptorTag} = $1;
		next;
	}

	# *.NIT
	if (defined $found->{DVB_DescriptorTag} &&
	 $found->{DVB_DescriptorTag}==131 &&
	 m/^                 ([[:xdigit:]]{4}):  ([0-9a-f ]+)   /) {
		my $addr=$1;
		my $hexstr=$2;
		$hexstr =~ s/  +/ /g;
		my $chunk;
		while ($hexstr) {
			$chunk = substr($hexstr,0,12,'');
			lcn_process($db,$chunk);
		}
		next;
	}

	# *0x0011.SDT
	if (m/^    Service_id: (\d+) \((0x[[:xdigit:]]{4})\)/) {
		$found->{program_number} = $2;
		next;
	}

	# *0x0011.SDT
	# FIXME - DVB-DescriptorTag: 72 (0x48)
	if (m/^            service_provider_name: "([^"]+)"/) {
		$db->{program}{$found->{program_number}}{Service_provider}=$1;
		next;
	}

	# *0x0011.SDT
	# FIXME - DVB-DescriptorTag: 72 (0x48)
	if (m/^            Service_name: "([^"]+)"/) {
		my $program_number = $found->{program_number};
		delete $found->{program_number};

		$db->{program}{$program_number}{Service_name}=$1;
		next;
	}

	# TODO - DVB-DescriptorTag: 115 (0x73)
	#	(CRID://melbourneabcnews24.abc.net.au)

	# *.PMT
	if (m/^Program_number: (\d+) \((0x[[:xdigit:]]{4})\)/) {
		$found->{program_number} = $2;
		next;
	}

	# *.PMT
	if (m/^PCR PID: (\d+) \((0x[[:xdigit:]]{4})\)/) {
		my $program_number = $found->{program_number};

		$db->{program}{$program_number}{pid}{PCR}=$2;
		$db->{pid}{$2}{programs}{$program_number}++;
		$db->{pid}{$2}{usage}='PCR';
		next;
	}

	# *.PMT
	if (m/^    Stream_type: (\d+) \((0x[[:xdigit:]]{2})\)/) {
		$found->{Stream_type}=$2;
		# the previous stream has ended, so delete its cached details
		delete $found->{Elementary_PID};
		next;
	}

	# *.PMT
	if (m/^    Elementary_PID: (\d+) \((0x[[:xdigit:]]{4})\)/) {
		my $pid = $2;
		$found->{Elementary_PID}=$pid;

		my $program_number = $found->{program_number};
		if ($program_number) {
			$db->{pid}{$pid}{programs}{$program_number}++;
		}

		my $stream_type = $found->{Stream_type};
		if ($stream_type) {
			my $type = stream_type_to_str($stream_type);
			add_type($db,$found,$type);
		}
		next;
	}

	# *.PMT
	if (defined $found->{DVB_DescriptorTag} &&
	 $found->{DVB_DescriptorTag}==86 &&
	 m/^               Teletext_type: (\d+) \((0x[[:xdigit:]]{2})\)/) {
		if ($2 eq '0x02') {
			add_type($db,$found,'subtitle');
		}
		delete $found->{DVB_DescriptorTag};
		next;
	}

	# *.PMT
	if (defined $found->{DVB_DescriptorTag} &&
	 $found->{DVB_DescriptorTag}==106 &&
	 m/^            descriptor_length: (\d+) \((0x[[:xdigit:]]{2})\)/) {
		add_type($db,$found,'AC3');
		delete $found->{DVB_DescriptorTag};
		next;
	}

	# *.PMT
	# FIXME - "MPEG-DescriptorTag: 14"
	if (m/^            maximum_bitrate: (\d+) \((0x[[:xdigit:]]{8})\)  \(= (\d+) Bytes\/sec\)/) {
		my $pid = $found->{Elementary_PID};

		warn "x" if !$pid;
		next if !$pid;

		$db->{pid}{$pid}{maximum_bitrate}=$3;
		$db->{global}{maximum_bitrate}+=$3;
	}

	# *.PMT
	if (m/^==========================================================/) {
		# End of file, so empty the found cache
		$found={}
	}

}

print Dumper($db);

