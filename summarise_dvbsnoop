#!/usr/bin/perl
use warnings;
use strict;
#
# Reads a set of dvbsnoop decode text files on input and outputs a summary
#

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

sub stream_type_to_str($$$) {
	my ($stream_type,$desctag,$descriptor) = @_;

# From the dvbsnoop output:
# (0x02)  [= ITU-T Rec. H.262 | ISO/IEC 13818-2 Video | ISO/IEC 11172-2 constr. parameter video stream] 
#	MPEG-DescriptorTag: 2 (0x02)  [= video_stream_descriptor]
# (0x03)  [= ISO/IEC 11172 Audio]
# (0x04)  [= ISO/IEC 13818-3 Audio]
#	MPEG-DescriptorTag: 3 (0x03)  [= audio_stream_descriptor]
# (0x05)  [= ITU-T Rec. H.222.0 | ISO/IEC 13818-1 private sections]
#	MPEG-DescriptorTag: 15 (0x0f)  [= private_data_indicator_descriptor]
#	DVB-DescriptorTag: 111 (0x6f)  [= application_signalling_descriptor]
# (0x06)  [= ITU-T Rec. H.222.0 | ISO/IEC 13818-1 PES packets containing private data]
#	DVB-DescriptorTag: 86 (0x56)  [= teletext_descriptor]
#	DVB-DescriptorTag: 106 (0x6a)  [= AC3_descriptor]
#	DVB-DescriptorTag: 195 (0xc3)  [= User defined]
# (0x0b)  [= ISO/IEC 13818-6 DSM-CC U-N Messages]

	if ($stream_type eq '0x02') {
		return 'video';
	}
	if ($stream_type eq '0x03') {
		return 'audio';
	}
	if ($stream_type eq '0x04') {
		return 'audio';
	}
	if ($stream_type eq '0x05') {
		if ($descriptor eq '0x0f') {
			return 'private_data';
		}
		if ($descriptor eq '0x6f') {
			return 'application_signalling';
		}
		return undef;
	}
	if ($stream_type eq '0x06') {
		if ($descriptor eq '0x56') {
			return 'teletext';
		}
		if ($descriptor eq '0x6a') {
			return 'AC3';
		}
		if ($descriptor eq '0xc3') {
			return 'User_defined';
		}
		return undef;
	}
	if ($stream_type eq '0x0b') {
		return 'DSM-CC';
	}
	return undef;
}


# Store our summary info
my $db={};

# Store information found on previous input lines
my $found={};

# TODO - accept cmdline argument defining the global name for this set of
# files, then move almost all db data into a namespace defined by this.
# This would allow the merging of the summary files from different stations.
# The db->shared namespace is shared amongst all stations

while (<>) {
	chomp;

	# TODO - read the ^PID: at the start of the file and mark that pid
	# as seen in the db->

	# *0x0000.PAT
	if (m/^    Program_number: (\d+) \((0x[[:xdigit:]]{4})\)/) {
		$found->{program_number} = $2;
		next;
	}

	# *0x0000.PAT
	if (m/^    (Network_PID|Program_map_PID): (\d+) \((0x[[:xdigit:]]{4})\)/) {
		my $pid = $3;

		my $usage;
		if ($1 eq 'Network_PID') {
			$usage = 'NIT';
		} else {
			$usage = 'PMT';
		}

		my $program_number = $found->{program_number};
		delete $found->{program_number};

		$db->{program}{$program_number}{pid}{$usage}=$pid;
		$db->{pid}{$pid}{programs}{$program_number}++;
		$db->{pid}{$pid}{usage}=$usage;
		next;
	} 

	# *0x0010.NIT
	if (m/^        Network_name: "([^"]+)"/) {
		$db->{global}{network_name}=$1;
		next;
	}

	# *0x0010.NIT
	# frequency we are listening to
	if (m/^            Center frequency: (0x[[:xdigit:]]{8}) \(= (\d{6}.\d{3}) kHz\)/) {
		$db->{global}{center_frequency}=$2;
		$db->{shared}{frequency}{$2}{seen}++;
		$found->{frequency}=$2;
		next;
	}

	# *0x0010.NIT
	if (m/^            Bandwidth: (\d+) \((0x[[:xdigit:]]{2})\)  \[= (\d+) MHz\]/) {
		next if !$found->{frequency};
		$db->{shared}{frequency}{$found->{frequency}}{bandwidth}=$3;
		next;
	}

	# *0x0010.NIT
	if (m/^            Constellation: (\d+) \((0x[[:xdigit:]]{2})\)  \[= (\S+)\]/) {
		next if !$found->{frequency};
		$db->{shared}{frequency}{$found->{frequency}}{constellation}=$3;
		next;
	}

	# *0x0010.NIT
	if (m/^            Code_rate_HP_stream: (\d+) \((0x[[:xdigit:]]{2})\)  \[= (\S+)\]/) {
		next if !$found->{frequency};
		$db->{shared}{frequency}{$found->{frequency}}{code_rate_hp}=$3;
		next;
	}

	# *0x0010.NIT
	if (m/^            Code_rate_LP_stream: (\d+) \((0x[[:xdigit:]]{2})\)  \[= (\S+)\]/) {
		next if !$found->{frequency};
		$db->{shared}{frequency}{$found->{frequency}}{code_rate_lp}=$3;
		next;
	}

	# *0x0010.NIT
	if (m/^            Guard_interval: (\d+) \((0x[[:xdigit:]]{2})\)  \[= (\S+)\]/) {
		next if !$found->{frequency};
		$db->{shared}{frequency}{$found->{frequency}}{guard_interval}=$3;
		next;
	}

	# *0x0010.NIT
	if (m/^            Transmission_mode: (\d+) \((0x[[:xdigit:]]{2})\)  \[= (\S+) mode\]/) {
		next if !$found->{frequency};
		$db->{shared}{frequency}{$found->{frequency}}{transmission_mode}=$3;
		delete $found->{frequency};
		next;
	}

	# *0x0010.NIT
	# part of a DVB-DescriptorTag: 98 frequency_list_descriptor
	if (m/^               Centre_frequency: ([[:xdigit:]]{8})  \(= (\d{6}.\d{3}) kHz\)/) {
		$db->{shared}{frequency}{$2}{seen}++;
		next;
	}

	# *0x0011.SDT
	if (m/^    Service_id: (\d+) \((0x[[:xdigit:]]{4})\)/) {
		$found->{program_number} = $2;
		next;
	}

	# *0x0011.SDT
	if (m/^            service_provider_name: "([^"]+)"/) {
		$db->{program}{$found->{program_number}}{Service_provider}=$1;
		next;
	}

	# *0x0011.SDT
	if (m/^            Service_name: "([^"]+)"/) {
		my $program_number = $found->{program_number};
		delete $found->{program_number};

		$db->{program}{$program_number}{Service_name}=$1;
		next;
	}

	# *.PMT
	if (m/^Program_number: (\d+) \((0x[[:xdigit:]]{4})\)/) {
		$found->{program_number} = $2;
		next;
	}

	# *.PMT
	if (m/^PCR PID: (\d+) \((0x[[:xdigit:]]{4})\)/) {
		my $program_number = $found->{program_number};

		$db->{program}{$program_number}{pid}{PCR}=$2;
		$db->{pid}{$2}{programs}{$program_number}++;
		$db->{pid}{$2}{usage}='PCR';
		next;
	}

	# *.PMT
	if (m/^    Stream_type: (\d+) \((0x[[:xdigit:]]{2})\)/) {
		$found->{Stream_type}=$2;
		# the previous stream has ended, so delete its cached details
		delete $found->{Elementary_PID};
		next;
	}

	# *.PMT
	if (m/^    Elementary_PID: (\d+) \((0x[[:xdigit:]]{4})\)/) {
		$found->{Elementary_PID}=$2;
		next;
	}

	# *.PMT (found in other files, but not with a found-> program,stream and pid)
	if (m/^            (MPEG-DescriptorTag|DVB-DescriptorTag): (\d+) \((0x[[:xdigit:]]{2})\)/) {
		my $program_number = $found->{program_number};
		my $stream_type = $found->{Stream_type};
		my $pid = $found->{Elementary_PID};

		next if !$pid or !$stream_type or !$program_number;

		# FIXME - this is wrong, since it doesnt handle multiple
		# descriptortags overwriting each others details in db->

		$db->{pid}{$pid}{programs}{$program_number}++;
		$db->{pid}{$pid}{Stream_type}=$stream_type;
		$db->{pid}{$pid}{DescriptorTag}=$3;

		my $type = stream_type_to_str($stream_type,$1,$3);

		if ($type) {
			$db->{program}{$program_number}{pid}{$type}=$pid;
			$db->{pid}{$pid}{usage}=$type;

			delete $db->{program}{$program_number}{pid}{$stream_type};
			delete $found->{Stream_type};
		} else {
			$db->{program}{$program_number}{pid}{$stream_type}=$pid;
			$db->{pid}{$pid}{usage}=$stream_type;
		}
		next;
	}

	# *.PMT
	if (m/^            maximum_bitrate: (\d+) \((0x[[:xdigit:]]{8})\)  \(= (\d+) Bytes\/sec\)/) {
		my $pid = $found->{Elementary_PID};

		warn "x" if !$pid;
		next if !$pid;

		$db->{pid}{$pid}{maximum_bitrate}=$3;
		$db->{global}{maximum_bitrate}+=$3;
	}

	# *.PMT
	if (m/^    ES_info_length: 0 /) {
		# TODO - this is not found in any current stream (20100720)
		# is there a reason to keep it, what is it supposed to do?
		my $program_number = $found->{program_number};
		my $stream_type = $found->{Stream_type};
		delete $found->{Stream_type};
		my $pid = $found->{Elementary_PID};
		delete $found->{Elementary_PID};

		next if !$pid or !$stream_type or !$program_number;

		$db->{pid}{$pid}{programs}{$program_number}++;
		$db->{pid}{$pid}{Stream_type}=$stream_type;

		my $type = stream_type_to_str($stream_type,undef,undef);

		if ($type) {
			$db->{program}{$program_number}{pid}{$type}=$pid;
			$db->{pid}{$pid}{usage}=$type;

			delete $db->{program}{$program_number}{pid}{$stream_type};
		} else {
			$db->{program}{$program_number}{pid}{$stream_type}=$pid;
			$db->{pid}{$pid}{usage}=$stream_type;
		}
		next;
	}

	# *.PMT
	if (m/^==========================================================/) {
		# End of file, so empty the found cache
		$found={}
	}

}

print Dumper($db);

